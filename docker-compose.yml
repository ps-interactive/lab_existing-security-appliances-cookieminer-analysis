# Inspired by: https://github.com/wazuh/wazuh-docker/blob/v4.0.0_1.10.1/docker-compose.yml

# Wazuh App Copyright (C) 2020 Wazuh Inc. (License GPLv2)
version: '3.7'

services:
  wazuh:
    hostname: wazuh
    image: wazuh/wazuh-odfe:4.0.0_1.10.1
    restart: always
    ports:
      - "1514:1514"
      - "1515:1515"
      - "514:514/udp"
      - "55000:55000"
    environment:
      - ELASTICSEARCH_URL=https://elasticsearch:9200
      # In a non-demo deployment we wouldn't place secrets in the Dockerfile
      - ELASTIC_USERNAME=admin
      - ELASTIC_PASSWORD=admin
      - FILEBEAT_SSL_VERIFICATION_MODE=none
      - no_proxy=localhost,127.0.0.1,::1,wazuh,elasticsearch,kibana,attacker,victim
#    volumes:
      # For more context on wazuh-config-mount, please view...
      # https://documentation.wazuh.com/3.7/docker/container-usage.html#mount-custom-wazuh-configuration-files
#      - './wazuh-manager-container/misc/local_rules.xml:/wazuh-config-mount/etc/rules/local_rules.xml'
#      - './wazuh-manager-container/misc/ossec.conf:/wazuh-config-mount/etc/ossec.conf'

  elasticsearch:
    image: amazon/opendistro-for-elasticsearch:1.10.1
    hostname: elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - cluster.name=wazuh-cluster
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
      - no_proxy=localhost,127.0.0.1,::1,wazuh,elasticsearch,kibana,attacker,victim
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  kibana:
    image: wazuh/wazuh-kibana-odfe:4.0.0_1.10.1
    hostname: kibana
    restart: always
    ports:
      - 8080:5601
    environment:
      # Inspired by: https://github.com/wazuh/wazuh-docker/blob/v4.0.0_1.10.1/docker-compose.yml
      - ELASTICSEARCH_USERNAME=admin
      - ELASTICSEARCH_PASSWORD=admin
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/opendistroforelasticsearch.example.org.cert
      - SERVER_SSL_KEY=/usr/share/kibana/config/opendistroforelasticsearch.example.org.key
      - no_proxy=localhost,127.0.0.1,::1,wazuh,elasticsearch,kibana,attacker,victim
    depends_on:
      - elasticsearch
    links:
      - elasticsearch:elasticsearch
      - wazuh:wazuh
  attacker:
    image: zachroofsec/cookieminer-analysis-attacker
#    build: ./attacker-container
    container_name: attacker
#    privileged: true
    environment:
#      - http_proxy=$http_proxy
      - no_proxy=localhost,127.0.0.1,::1,wazuh,elasticsearch,kibana,attacker,victim
#    cap_add:
#      - NET_ADMIN
#      - SYS_NICE
  #     volumes:
  #       - './attacker-container/misc/malware.sh:/root/malware.sh'
  #       - './victim-container/misc/ossec.conf:/tmp/ossec.conf'
  #       - './victim-container/misc/internal_options.conf:/tmp/internal_options.conf'

  victim:
    image: zachroofsec/cookieminer-analysis-victim
#    build: ./victim-container
    container_name: victim
    privileged: true
    environment:
      - http_proxy=$http_proxy
      # If a process (outside of docker) needs to communicate with a container (e.g., host-level browser), you need to add no_proxy to user-data script
      - no_proxy=localhost,127.0.0.1,::1,wazuh,elasticsearch,kibana,attacker,victim
    cap_add:
      - NET_ADMIN
      - SYS_NICE
    links:
      - wazuh:wazuh
      - attacker:attacker
#    volumes:
#      - './victim-container/misc/Cookies:/root/.config/chromium/Default/Cookies'
#      - './victim-container/misc/malware.sh:/root/malware.sh'
#      - './victim-container/misc/suricata-custom.rules:/etc/suricata/rules/suricata-custom.rules'
#      - './victim-container/misc/suricata-default.rules:/etc/suricata/rules/suricata.rules'
    #       - './victim-container/misc/ossec.conf:/tmp/ossec.conf'
    #       - './victim-container/misc/internal_options.conf:/tmp/internal_options.conf'
    depends_on:
      - wazuh
      - attacker

